---
- hosts: all
  become: yes
  become_user: root
  tasks:
  - name: "Check existence of docker"
    stat:
      path: /usr/lib/systemd/system/docker.service
    register: install_result

  - name: "Install docker"
    shell: >
      curl -fsSL https://get.docker.com/ | sh
    when: not install_result.stat.exists

  - name: "Start docker service"
    service:
      name: docker
      state: started
      enabled: true

  - name: "Check the docker status"
    no_log: true
    shell: >
      curl --unix-socket /var/run/docker.sock http:/info | python -m json.tool
    register: docker_result

  - set_fact:
      docker_info: "{{ docker_result.stdout | from_json }}"

- name: Configure primary swarm manager
  hosts: managers[0]
  become: yes
  become_user: root
  
  tasks:
    - name: "Start primary swarm manager"
      shell: >
        docker swarm init --advertise-addr 192.168.77.21
      register: init_result
      when: docker_info.Swarm.LocalNodeState != "active"

    - name: Retrieve manager token
      shell: >
        docker swarm join-token manager --quiet
      register: manager_token_result

    - set_fact:
        manager_token: "{{ manager_token_result.stdout }}"

    - name: Retrieve worker token
      shell: >
        docker swarm join-token worker --quiet
      register: worker_token_result

    - set_fact: worker_token="{{ worker_token_result.stdout }}"

- hosts: workers
  become: yes
  become_user: root
  tasks:
    - name: "Check hostvars."
      debug:
        var: hostvars['manager1']['worker_token']
    
    - name: "Start swarm workers"
      shell: >
        docker swarm join \
          --token {{ hostvars['manager1']['worker_token'] }} \
          192.168.77.21:2377
      register: init_result
      when: docker_info.Swarm.LocalNodeState != "active"

- hosts: all
  serial: 1
  become: yes
  become_user: root
  tasks:
    - name: "Label nodes"
      shell: >
        docker node update --label-add {{ item }}=true {{ inventory_hostname }}
      when: "item != 'all_groups'"
      with_items:
        - "{{ group_names }}"
      delegate_to: "{{ groups['managers'][0] }}"
      tags:
      - label

- hosts: all
  become: yes
  become_user: root
  tasks:
    - import_tasks: ansible-chips.yml
